import '../styles/globals.css';
import 'react-datepicker/dist/react-datepicker.css';
import styles from '../styles/Home.module.css';
import { useEffect, useState } from 'react';
import type { AppProps } from 'next/app';
import { Provider } from 'react-redux';
import Head from 'next/head';

import { store } from '../store';
import { getNearContract } from '../utils';
import { setEventStatus } from '../store/reducers/contractReducer/actions';
// import { setAppStateDevMode } from '../store/reducers/appStateReducer/actions';
import { getUserAccountData } from '../store/reducers/userAccountReducer/actions';

import { mockUserAccount } from '../mockData/mockUserAccount';

import Header from '../components/header';
import Loader from '../components/loader';
import { setAppLoadingState } from '../store/reducers/appStateReducer/actions';

function MyApp({ Component, pageProps }: AppProps) {
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const { is_loading } = store.getState().appStateReducer;
  const initVselfWebApp = async () => {
    try {
      const { contract } = await getNearContract();
      const eventStatus = await contract.is_active();
      store.dispatch(setEventStatus(eventStatus));
      store.dispatch(getUserAccountData(mockUserAccount));
    } catch (err) {
      console.log('Cannot connect to contract: ', err);
    } finally {
      setTimeout(() => {
        store.dispatch(setAppLoadingState(false));
        setIsLoading(false);
      }, 1000);
    }
  };

  useEffect(() => {
    initVselfWebApp();
  }, []);

  return (
    <Provider store={store}>
      <Head>
        <title>VSELF APP</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {is_loading || isLoading ? (
        <div className="flex h-screen">
          <div className="m-auto">
            <Loader />
          </div>
        </div>
      ) : (
        <>
          <Header />
          <div className={`${styles.container} relative`}>
            <Component {...pageProps} />
          </div>
        </>
      )}
    </Provider>
  );
}
export default MyApp;
